// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?

  role      role_user @default(Pembeli)
  address        String?

  accounts       Account[]
  sessions       Session[]

  pembeli        pembeli?
  supplier       supplier?
}

model Account {
  id                 String   @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?     
  token_type         String?  
  scope              String?  
  id_token           String?  
  session_state      String?  

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model supplier {
  id            String         @id @default(uuid())
  user_id       String         @unique
  user          User           @relation(references: [id], fields: [user_id], onDelete: Cascade)
  member        Boolean        @default(false)
  supplier_data supplier_data?
  fruit         fruit[]
}

model supplier_data {
  id            String   @id @default(uuid())
  supplier_id   String   @unique
  supplier      supplier @relation(references: [id], fields: [supplier_id], onDelete: Cascade)
  license       String?
  photo_profile String?
  omzet         String?
}

model pembeli {
  id          String        @id @default(uuid())
  user_id     String        @unique
  user        User?         @relation(references: [id], fields: [user_id], onDelete: Cascade)
  transaction transaction[]
}


model fruit {
  id           String         @id @default(uuid())
  name         String
  price_id     String         @unique
  image        String?
  status_fruit status_fruit   @default(empty_stock)
  stock        Int            @default(0)
  isVerif      Boolean        @default(false)
  price        fruit_price    @relation(references: [id], fields: [price_id], onDelete: Cascade)
  transaction  transaction[]
  supplier_id  String
  supplier     supplier  @relation(references: [id], fields: [supplier_id], onDelete: Cascade)
}

model fruit_price {
  id    String   @id @default(uuid())
  price String
  date  DateTime @default(now())
  fruit fruit?
}


model transaction {
  id         String  @id @default(uuid())
  fruit_id   String
  fruit      fruit   @relation(references: [id], fields: [fruit_id], onDelete: Cascade)
  pembeli_id String
  pembeli    pembeli @relation(references: [id], fields: [pembeli_id], onDelete: Cascade)
}

enum role_user {
  Pembeli
  Supplier
  Admin
}

enum status_fruit {
  ready_stock
  empty_stock
}
